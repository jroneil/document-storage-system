

networks:
  backend:

services:
  # API Gateway
  api-gateway:
    build: ./api-gateway
    ports:
      - "8000:8000"
    environment:
      - INGESTION_SERVICE_URL=http://ingestion-service:5001
      - METADATA_SERVICE_URL=http://metadata-service:5002
      - STORAGE_SERVICE_URL=http://storage-service:5003
      - PROCESSING_SERVICE_URL=http://processing-service:5004
      - SEARCH_SERVICE_URL=http://search-service:5005
      - AI_SERVICE_URL=http://ai-service:5006
      - NOTIFICATION_SERVICE_URL=http://notification-service:5007
    depends_on:
      - ingestion-service
      - metadata-service
      - storage-service
      - processing-service
      - search-service
      - ai-service
      - notification-service
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:8000/health || exit 1"] # Replace /health with your actual health check endpoint
      interval: 10s
      timeout: 5s
      retries: 5

  # Ingestion Service
  ingestion-service:
    build: ./ingestion-service
    ports:
      - "5001:5001"
    environment:
      - RABBITMQ_HOST=rabbitmq
      - METADATA_SERVICE_URL=http://metadata-service:5002
    depends_on:
      - rabbitmq
      - metadata-service
    networks:
      - backend
    # Add a health check specific to your ingestion service

  # Metadata Service
  metadata-service:
    build: ./metadata-service
    ports:
      - "5002:5002"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=document_storage
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - MONGO_HOST=mongo
      - MONGO_DB=metadata_db
      - RABBITMQ_HOST=rabbitmq
    depends_on:
      - postgres
      - mongo
      - rabbitmq
    networks:
      - backend
    # Add a health check specific to your metadata service

  # Storage Service
  storage-service:
    build: ./storage-service
    ports:
      - "5003:5003"
    environment:
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin 
      - MINIO_SECRET_KEY=minioadmin  
      - MINIO_BUCKET=documents
    depends_on:
      - minio
    networks:
      - backend
    # Add a health check specific to your storage service

  # Processing Service
  processing-service:
    build: ./processing-service
    ports:
      - "5004:5004"
    depends_on:
      - storage-service
    networks:
      - backend
    # Add a health check specific to your processing service

  # Search Service
  search-service:
    build: ./search-service
    ports:
      - "5005:5005"
    environment:
      - ELASTICSEARCH_HOST=elasticsearch
    depends_on:
      - elasticsearch
    networks:
      - backend
    # Add a health check specific to your search service

  # AI Service
  ai-service:
    build: ./ai-service
    ports:
      - "5006:5006"
    volumes:
      - ./ai-service:/app
    depends_on:
      - metadata-service
    networks:
      - backend
    # Add a health check specific to your AI service

  # Notification Service
  notification-service:
    build: ./notification-service
    ports:
      - "5007:5007"
    environment:
      - SMTP_HOST=smtp
      - SMTP_PORT=1025
      - SMTP_USER=user
      - SMTP_PASSWORD=password
    depends_on:
      - smtp
    networks:
      - backend
    # Add a health check specific to your notification service

  # Databases
  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-document_storage}
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d document_storage"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo:
    image: mongo:5.0
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - backend
    # Add a health check for MongoDB

  elasticsearch:
    image: elasticsearch:7.10.1
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - backend
    deploy:
      resources:
        limits:
          memory: 2g
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"'"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Message Queue
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "rabbitmqctl status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Object Storage (MinIO)
  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin  # Insecure, change for production!
      MINIO_ROOT_PASSWORD: minioadmin # Insecure, change for production!
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  # SMTP Server (for testing notifications)
  smtp:
    image: mailhog/mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - backend

volumes:
  postgres_data:
  mongo_data:
  elasticsearch_data:
  rabbitmq_data:
  minio_data:
